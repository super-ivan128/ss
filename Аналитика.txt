1. Бизнес-процесс создания заказа:

  Для описания процесса создания заказа в мобильном клиент-серверном приложении "Частная пекарня" можно использовать
  нотацию BPMN (Business Process Model and Notation). Рассмотрим следующие шаги:

  1) Начало: Пользователь запускает приложение.
  2) Выбор товаров: Пользователь выбирает продукты из списка доступной выпечки.
  3) Добавление в корзину: Продукты добавляются в корзину пользователя.
  4) Редактирование заказа: Пользователь может изменить количество товаров, удалить или добавить новые товары в корзину.
  5) Переход к оплате: Пользователь подтверждает заказ и переходит к оплате.
  6) Оплата: Пользователь выбирает способ оплаты (например, банковская карта или другой способ).
  7) Подтверждение заказа: Система подтверждает успешную оплату и завершение заказа.
  8) Отправка уведомления: Пользователь получает уведомление о том, что заказ успешно оформлен.
  9) Завершение: Процесс завершен.

1.1 Диаграмма BPMN для создания заказа: 
   [Начало]-->[Выбор товара]-->[Добавление в корзину]-->[Редактирование заказа]-->[Переход к оплате]-->[Оплата]-->[Подтверждение заказа]-->[Отправка уведомления]-->[Завершение]

2. Синхронизация данных между клиентом и сервером
 
   Для синхронизации данных между мобильным клиентом и сервером можно использовать REST API.
 Рассмотрим следующие основные операции, которые должны быть поддержаны:

    Создание заказа:
        POST /orders
            Параметры: товары, количество, данные пользователя (имя, фамилия, адрес доставки и т.д.)
            Ответ: подтверждение создания заказа, уникальный идентификатор заказа.

    Редактирование заказа:
        PUT /orders/{orderId}
            Параметры: обновленные данные заказа (товары, количество, данные клиента и т.д.)
            Ответ: подтверждение изменения.

    Отмена заказа:
        DELETE /orders/{orderId}
            Параметры: идентификатор заказа.
            Ответ: подтверждение отмены.

    Оплата заказа:
        POST /payment
            Параметры: идентификатор заказа, платежные данные.
            Ответ: подтверждение успешной оплаты или ошибка.

    Изменение персональных данных:
        PUT /user/{userId}
            Параметры: новое имя, фамилия, адрес и т.д.
            Ответ: подтверждение изменения.

Процесс синхронизации данных между клиентом и сервером включает в себя обработку этих запросов и обновление соответствующих данных в базе данных.

3. ER-диаграмма сущностей

Для приложения "Частная пекарня" можно создать ER-диаграмму для сущностей:

    Покупатель (Customer)
        Идентификатор (ID)
        Имя (First Name)
        Фамилия (Last Name)
        Дата рождения (Date of Birth)

    Товар (Product)
        Идентификатор (ID)
        Название (Name)
        Стоимость (Price)

    Покупка (Purchase)
        Идентификатор (ID)
        Идентификатор покупателя (Customer_ID)
        Идентификатор товара (Product_ID)
        Дата покупки (Purchase Date)

Связи:

    Один покупатель может иметь много покупок.
    Каждая покупка относится к одному товару, но один товар может быть куплен многими покупателями.

1. Описание бизнес-процесса создания заказа

Для описания процесса создания заказа в мобильном клиент-серверном приложении "Частная пекарня" можно использовать нотацию BPMN (Business Process Model and Notation). Рассмотрим следующие шаги:
Бизнес-процесс создания заказа:

    Начало: Пользователь запускает приложение.
    Выбор товаров: Пользователь выбирает продукты из списка доступной выпечки.
    Добавление в корзину: Продукты добавляются в корзину пользователя.
    Редактирование заказа: Пользователь может изменить количество товаров, удалить или добавить новые товары в корзину.
    Переход к оплате: Пользователь подтверждает заказ и переходит к оплате.
    Оплата: Пользователь выбирает способ оплаты (например, банковская карта или другой способ).
    Подтверждение заказа: Система подтверждает успешную оплату и завершение заказа.
    Отправка уведомления: Пользователь получает уведомление о том, что заказ успешно оформлен.
    Завершение: Процесс завершен.

2. Синхронизация данных между клиентом и сервером

Для синхронизации данных между мобильным клиентом и сервером можно использовать REST API. Рассмотрим следующие основные операции, которые должны быть поддержаны:

    Создание заказа:
        POST /orders
            Параметры: товары, количество, данные пользователя (имя, фамилия, адрес доставки и т.д.)
            Ответ: подтверждение создания заказа, уникальный идентификатор заказа.

    Редактирование заказа:
        PUT /orders/{orderId}
            Параметры: обновленные данные заказа (товары, количество, данные клиента и т.д.)
            Ответ: подтверждение изменения.

    Отмена заказа:
        DELETE /orders/{orderId}
            Параметры: идентификатор заказа.
            Ответ: подтверждение отмены.

    Оплата заказа:
        POST /payment
            Параметры: идентификатор заказа, платежные данные.
            Ответ: подтверждение успешной оплаты или ошибка.

    Изменение персональных данных:
        PUT /user/{userId}
            Параметры: новое имя, фамилия, адрес и т.д.
            Ответ: подтверждение изменения.

Процесс синхронизации данных между клиентом и сервером включает в себя обработку этих запросов и обновление соответствующих данных в базе данных.
3. ER-диаграмма сущностей

Для приложения "Частная пекарня" можно создать ER-диаграмму для сущностей:

    Покупатель (Customer)
        Идентификатор (ID)
        Имя (First Name)
        Фамилия (Last Name)
        Дата рождения (Date of Birth)

    Товар (Product)
        Идентификатор (ID)
        Название (Name)
        Стоимость (Price)

    Покупка (Purchase)
        Идентификатор (ID)
        Идентификатор покупателя (Customer_ID)
        Идентификатор товара (Product_ID)
        Дата покупки (Purchase Date)

Связи:

    Один покупатель может иметь много покупок.
    Каждая покупка относится к одному товару, но один товар может быть куплен многими покупателями.

4. Прототип экрана и описание пользовательского интерфейса

Прототип экрана: Создание заказа (в корзине)

Элементы интерфейса:

    1) Список товаров (с изображениями, названием, стоимостью)
    2) Кнопка "Добавить в корзину"
    3) Сумма корзины
    4) Кнопка "Перейти к оплате"
    5) Список товаров в корзине (с количеством, стоимостью)
    6) Кнопки для изменения количества товаров, удаления товара
    7) Кнопка "Редактировать заказ" или "Отмена"

Действия:

   1) Пользователь добавляет товары в корзину.
   2) После завершения выбора товаров, он переходит к оформлению заказа.
   3) При переходе к оплате, пользователь выбирает способ оплаты и вводит необходимые данные.
   4) После успешной оплаты, пользователю показывается сообщение о подтверждении заказа.

5. Подробное описание функции редактирования заказа
Описание:

Функция редактирования заказа позволяет пользователю изменять товары в корзине (изменять количество, добавлять или удалять товары).

Шаги редактирования:

    Запрос на редактирование заказа:
        API метод: PUT /orders/{orderId}
        Параметры: товары (ID товаров, количество, удаленные товары)
        Ответ: подтверждение изменения заказа.

    Управление товарами в корзине:
        Система обновляет корзину пользователя.
        Возможность удалить товар из корзины или изменить его количество.
        Система пересчитывает стоимость заказа.

API методы:

    GET /orders/{orderId} — получение информации о текущем заказе.
    PUT /orders/{orderId} — обновление заказа.

Пример API для редактирования заказа:
PUT /orders/12345
{
    "items": [
        {"productId": 1, "quantity": 2},
        {"productId": 3, "quantity": 1}
    ],
    "userDetails": {
        "name": "Иван",
        "surname": "Иванов",
        "address": "Москва, ул. Пушкина, д. 10"
    }
}

6. SQL-запросы

    1) Вывести покупателей с количеством покупок и общей стоимостью:
SELECT 
    c.ID, 
    c.first_name, 
    c.last_name, 
    COUNT(p.id) AS purchase_count, 
    SUM(pr.price) AS total_spent
FROM Customers c
JOIN Purchases p ON c.ID = p.customer_id
JOIN Products pr ON p.product_id = pr.ID
GROUP BY c.ID, c.first_name, c.last_name
ORDER BY total_spent DESC;

2) Получить покупателей, которые купили только один товар:
SELECT 
    c.ID, 
    c.first_name, 
    c.last_name
FROM Customers c
JOIN Purchases p ON c.ID = p.customer_id
GROUP BY c.ID
HAVING COUNT(DISTINCT p.product_id) = 1;
